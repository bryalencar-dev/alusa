name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 20
  PNPM_CACHE_DIR: .pnpm-store
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/alusa_ci
  FEATURE_ASAAS: 'false'
  TEST_ROUTES_ENABLED: 'true'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.pnpm-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get pnpm store path
        id: pnpm-store
        run: echo "store-path=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm
        id: pnpm-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.store-path }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - name: Install deps
        run: pnpm install --frozen-lockfile

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - run: pnpm install --frozen-lockfile
      - run: pnpm typecheck

  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alusa_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - run: pnpm install --frozen-lockfile
      - name: Prepare DB (migrate + seed)
        run: |
          pnpm db:migrate
          pnpm db:seed || true
      - run: pnpm test

  integration:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alusa_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - run: pnpm install --frozen-lockfile
      - name: Prepare DB (migrate + seed)
        run: |
          pnpm db:migrate
          pnpm db:seed || true
      - name: Start web (background)
        run: pnpm --filter web dev &
      - name: Wait server
        run: npx wait-on http://localhost:3000
      - name: Auth session contract
        run: |
          node - <<'EOF'
          const http = require('http');
          function req(path, method='GET', data){
            return new Promise((resolve,reject)=>{
              const body = data?JSON.stringify(data):null;
              const r = http.request({ hostname:'localhost', port:3000, path, method, headers: body?{'content-type':'application/json','content-length':Buffer.byteLength(body)}:{} },res=>{
                let d='';res.on('data',c=>d+=c);res.on('end',()=>resolve({status:res.statusCode, body:d}));});
              r.on('error',reject); if(body) r.write(body); r.end();
            });
          }
          (async()=>{
            // Seed garante admin aluno@example.com / senha123
            // Simples verificação: página /login acessível e rota auth carregada.
            const loginPage = await req('/login');
            if(loginPage.status!==200) { console.error('LOGIN PAGE FAIL', loginPage.status); process.exit(1);} else console.log('login page ok');
            // Sem sessão ainda, mas endpoint deve existir.
            const authRoute = await req('/api/auth/session');
            if(authRoute.status!==200){ console.error('AUTH SESSION ROUTE FAIL', authRoute.status); process.exit(1);} else console.log('auth session route ok');
            process.exit(0);
          })();
          EOF

  e2e:
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alusa_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: DB migrate
        run: pnpm db:migrate
      - name: Build app
        run: pnpm build
      - name: Start app
        run: pnpm --filter web start &
      - name: Wait for app
        run: npx wait-on http://localhost:3000
      - name: Run E2E tests
        env:
          NEXTAUTH_URL: http://localhost:3000
        run: pnpm test:e2e

  build:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, integration]
    steps:
      - uses: actions/checkout@v4
      - name: Enable corepack
        run: corepack enable
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      - run: pnpm install --frozen-lockfile
      - run: pnpm build

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, e2e]
    steps:
      - name: Deploy placeholder
        run: echo "Deploy placeholder - configurar Vercel secrets em etapa futura"

  deploy_preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Preview deploy placeholder
        run: echo "Preview deploy placeholder"
